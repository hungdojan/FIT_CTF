name: Run tests

on:
  push:
  pull_request:
  workflow_dispatch:

env:
  DB_USERNAME: db-user
  DB_PASSWORD: db-password
  DB_NAME: db-name
  DB_HOST: "mongodb://${DB_USERNAME}:${DB_PASSWORD}@localhost:27017"

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo
        env:
          MONGO_INITDB_ROOT_USERNAME: ${DB_USERNAME}
          MONGO_INITDB_ROOT_PASSWORD: ${DB_PASSWORD}
          MONGO_INITDB_DATABASE: ${DB_NAME}
        ports:
          - "27017:27017"
        options: >-
          --health-cmd "echo 'db.runCommand("ping").ok' | mongosh --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          virtualenvs-path: .venv
          installer-parallel: true

      # load cached venv if cache exists
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.output.python-version }}-${{ hashFiles('**/poetry.lock') }}

      # install dependencies if cache does not exist
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          poetry install --with test --no-interaction

      # run the tests
      - name: Run tests
        run: |
          poetry run coverage run
          poetry run coverage report
